/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


public class TopoDS_TShape extends Standard_Transient {
  private transient long swigCPtr;

  protected TopoDS_TShape(long cPtr, boolean cMemoryOwn) {
    super(TopoDSJNI.TopoDS_TShape_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(TopoDS_TShape obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        TopoDSJNI.delete_TopoDS_TShape(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public boolean Checked() {
    return TopoDSJNI.TopoDS_TShape_Checked__SWIG_0(swigCPtr, this);
  }

  public void Checked(boolean theIsChecked) {
    TopoDSJNI.TopoDS_TShape_Checked__SWIG_1(swigCPtr, this, theIsChecked);
  }

  public boolean Closed() {
    return TopoDSJNI.TopoDS_TShape_Closed__SWIG_0(swigCPtr, this);
  }

  public void Closed(boolean theIsClosed) {
    TopoDSJNI.TopoDS_TShape_Closed__SWIG_1(swigCPtr, this, theIsClosed);
  }

  public boolean Convex() {
    return TopoDSJNI.TopoDS_TShape_Convex__SWIG_0(swigCPtr, this);
  }

  public void Convex(boolean theIsConvex) {
    TopoDSJNI.TopoDS_TShape_Convex__SWIG_1(swigCPtr, this, theIsConvex);
  }

  public SWIGTYPE_p_std__string DumpJsonToString(int depth) {
    return new SWIGTYPE_p_std__string(TopoDSJNI.TopoDS_TShape_DumpJsonToString__SWIG_0(swigCPtr, this, depth), true);
  }

  public SWIGTYPE_p_std__string DumpJsonToString() {
    return new SWIGTYPE_p_std__string(TopoDSJNI.TopoDS_TShape_DumpJsonToString__SWIG_1(swigCPtr, this), true);
  }

  public SWIGTYPE_p_opencascade__handleT_TopoDS_TShape_t EmptyCopy() {
    return new SWIGTYPE_p_opencascade__handleT_TopoDS_TShape_t(TopoDSJNI.TopoDS_TShape_EmptyCopy(swigCPtr, this), true);
  }

  public boolean Free() {
    return TopoDSJNI.TopoDS_TShape_Free__SWIG_0(swigCPtr, this);
  }

  public void Free(boolean theIsFree) {
    TopoDSJNI.TopoDS_TShape_Free__SWIG_1(swigCPtr, this, theIsFree);
  }

  public boolean Infinite() {
    return TopoDSJNI.TopoDS_TShape_Infinite__SWIG_0(swigCPtr, this);
  }

  public void Infinite(boolean theIsInfinite) {
    TopoDSJNI.TopoDS_TShape_Infinite__SWIG_1(swigCPtr, this, theIsInfinite);
  }

  public boolean Locked() {
    return TopoDSJNI.TopoDS_TShape_Locked__SWIG_0(swigCPtr, this);
  }

  public void Locked(boolean theIsLocked) {
    TopoDSJNI.TopoDS_TShape_Locked__SWIG_1(swigCPtr, this, theIsLocked);
  }

  public boolean Modified() {
    return TopoDSJNI.TopoDS_TShape_Modified__SWIG_0(swigCPtr, this);
  }

  public void Modified(boolean theIsModified) {
    TopoDSJNI.TopoDS_TShape_Modified__SWIG_1(swigCPtr, this, theIsModified);
  }

  public int NbChildren() {
    return TopoDSJNI.TopoDS_TShape_NbChildren(swigCPtr, this);
  }

  public boolean Orientable() {
    return TopoDSJNI.TopoDS_TShape_Orientable__SWIG_0(swigCPtr, this);
  }

  public void Orientable(boolean theIsOrientable) {
    TopoDSJNI.TopoDS_TShape_Orientable__SWIG_1(swigCPtr, this, theIsOrientable);
  }

  public TopAbs_ShapeEnum ShapeType() {
    return TopAbs_ShapeEnum.swigToEnum(TopoDSJNI.TopoDS_TShape_ShapeType(swigCPtr, this));
  }

}
