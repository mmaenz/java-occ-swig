/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




#ifdef WNT
#pragma warning(disable : 4716)
#endif


#include <stdlib.h>


SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}


#include <typeinfo>
#include <stdexcept>


#include <Standard_Failure.hxx>
#include <Standard_ErrorHandler.hxx>


void process_exception(Standard_Failure const& error, std::string method_name, std::string class_name) {
    std::string error_name = error.DynamicType()->Name();
	std::string error_message = error.GetMessageString();
	std::string message = error_name + error_message +
	                      " raised from method " + method_name + " of class " + class_name;
	PyErr_SetString(PyExc_RuntimeError, message.c_str());
}


#include <TopoDS.hxx>


#include<TopoDS_module.hxx>

//Dependencies
#include<Standard_module.hxx>
#include<NCollection_module.hxx>
#include<Message_module.hxx>
#include<TopAbs_module.hxx>
#include<TopLoc_module.hxx>
#include<TColgp_module.hxx>
#include<TColStd_module.hxx>
#include<TCollection_module.hxx>
#include<Storage_module.hxx>

SWIGINTERN std::string TopoDS_Shape_DumpJsonToString__SWIG_0(TopoDS_Shape *self,int depth=-1){
            std::stringstream s;
            self->DumpJson(s, depth);
            return s.str();}
SWIGINTERN Standard_Integer TopoDS_Shape___hash__(TopoDS_Shape *self){
            return self->HashCode(2147483647);
            }
SWIGINTERN bool TopoDS_Shape___eq_wrapper__(TopoDS_Shape *self,TopoDS_Shape const other){
            if (*self==other) return true;
            else return false;
            }
SWIGINTERN std::string TopoDS_TShape_DumpJsonToString__SWIG_0(TopoDS_TShape *self,int depth=-1){
            std::stringstream s;
            self->DumpJson(s, depth);
            return s.str();}

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_TopoDSJNI_process_1exception(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  Standard_Failure *arg1 = 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string *argp2 ;
  std::string *argp3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Standard_Failure **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Standard_Failure const & reference is null");
    return ;
  } 
  argp2 = *(std::string **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::string");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(std::string **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::string");
    return ;
  }
  arg3 = *argp3; 
  process_exception((Standard_Failure const &)*arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_TopoDSJNI_topods_1CompSolid_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopoDS_Shape *arg1 = 0 ;
  TopoDS_CompSolid result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = TopoDS::CompSolid((TopoDS_Shape const &)*arg1);
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "TopoDS::CompSolid", "TopoDS");
      SWIG_fail;
    }
  }
  *(TopoDS_CompSolid **)&jresult = new TopoDS_CompSolid((const TopoDS_CompSolid &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TopoDSJNI_topods_1Compound_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopoDS_Shape *arg1 = 0 ;
  TopoDS_Compound result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = TopoDS::Compound((TopoDS_Shape const &)*arg1);
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "TopoDS::Compound", "TopoDS");
      SWIG_fail;
    }
  }
  *(TopoDS_Compound **)&jresult = new TopoDS_Compound((const TopoDS_Compound &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TopoDSJNI_topods_1Edge_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopoDS_Shape *arg1 = 0 ;
  TopoDS_Edge result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = TopoDS::Edge((TopoDS_Shape const &)*arg1);
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "TopoDS::Edge", "TopoDS");
      SWIG_fail;
    }
  }
  *(TopoDS_Edge **)&jresult = new TopoDS_Edge((const TopoDS_Edge &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TopoDSJNI_topods_1Face_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopoDS_Shape *arg1 = 0 ;
  TopoDS_Face result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = TopoDS::Face((TopoDS_Shape const &)*arg1);
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "TopoDS::Face", "TopoDS");
      SWIG_fail;
    }
  }
  *(TopoDS_Face **)&jresult = new TopoDS_Face((const TopoDS_Face &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TopoDSJNI_topods_1Shell_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopoDS_Shape *arg1 = 0 ;
  TopoDS_Shell result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = TopoDS::Shell((TopoDS_Shape const &)*arg1);
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "TopoDS::Shell", "TopoDS");
      SWIG_fail;
    }
  }
  *(TopoDS_Shell **)&jresult = new TopoDS_Shell((const TopoDS_Shell &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TopoDSJNI_topods_1Solid_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopoDS_Shape *arg1 = 0 ;
  TopoDS_Solid result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = TopoDS::Solid((TopoDS_Shape const &)*arg1);
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "TopoDS::Solid", "TopoDS");
      SWIG_fail;
    }
  }
  *(TopoDS_Solid **)&jresult = new TopoDS_Solid((const TopoDS_Solid &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TopoDSJNI_topods_1Vertex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopoDS_Shape *arg1 = 0 ;
  TopoDS_Vertex result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = TopoDS::Vertex((TopoDS_Shape const &)*arg1);
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "TopoDS::Vertex", "TopoDS");
      SWIG_fail;
    }
  }
  *(TopoDS_Vertex **)&jresult = new TopoDS_Vertex((const TopoDS_Vertex &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TopoDSJNI_topods_1Wire_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopoDS_Shape *arg1 = 0 ;
  TopoDS_Wire result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = TopoDS::Wire((TopoDS_Shape const &)*arg1);
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "TopoDS::Wire", "TopoDS");
      SWIG_fail;
    }
  }
  *(TopoDS_Wire **)&jresult = new TopoDS_Wire((const TopoDS_Wire &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TopoDSJNI_new_1topods(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TopoDS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (TopoDS *)new TopoDS();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "TopoDS", "TopoDS");
      SWIG_fail;
    }
  }
  *(TopoDS **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TopoDSJNI_delete_1topods(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TopoDS *arg1 = (TopoDS *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TopoDS **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      delete arg1;
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "~TopoDS", "TopoDS");
      SWIG_fail;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_TopoDSJNI_TopoDS_1AlertWithShape_1GetShape(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopoDS_AlertWithShape *arg1 = (TopoDS_AlertWithShape *) 0 ;
  TopoDS_Shape result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_AlertWithShape **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->GetShape();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "GetShape", "TopoDS_AlertWithShape");
      SWIG_fail;
    }
  }
  {
    TopoDS_Shape* sh = &result;
    PyObject *resultobj = 0;
    if (!sh || sh->IsNull()) {
      Py_RETURN_NONE;
    }
    else {
      TopAbs_ShapeEnum shape_type = sh->ShapeType();
      switch (shape_type)
      {
      case TopAbs_COMPOUND:
        resultobj = SWIG_NewPointerObj(new TopoDS_Compound(TopoDS::Compound(*sh)), SWIGTYPE_p_TopoDS_Compound, SWIG_POINTER_OWN |  0);
        break;
      case TopAbs_COMPSOLID:
        resultobj = SWIG_NewPointerObj(new TopoDS_CompSolid(TopoDS::CompSolid(*sh)), SWIGTYPE_p_TopoDS_CompSolid, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_SOLID:
        resultobj = SWIG_NewPointerObj(new TopoDS_Solid(TopoDS::Solid(*sh)), SWIGTYPE_p_TopoDS_Solid, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_SHELL:
        resultobj = SWIG_NewPointerObj(new TopoDS_Shell(TopoDS::Shell(*sh)), SWIGTYPE_p_TopoDS_Shell, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_FACE:
        resultobj = SWIG_NewPointerObj(new TopoDS_Face(TopoDS::Face(*sh)), SWIGTYPE_p_TopoDS_Face, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_WIRE:
        resultobj = SWIG_NewPointerObj(new TopoDS_Wire(TopoDS::Wire(*sh)), SWIGTYPE_p_TopoDS_Wire, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_EDGE:
        resultobj = SWIG_NewPointerObj(new TopoDS_Edge(TopoDS::Edge(*sh)), SWIGTYPE_p_TopoDS_Edge, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_VERTEX:
        resultobj = SWIG_NewPointerObj(new TopoDS_Vertex(TopoDS::Vertex(*sh)), SWIGTYPE_p_TopoDS_Vertex, SWIG_POINTER_OWN |  0 );
        break;
      default:
        break;
      }
    }
    return resultobj;
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_TopoDSJNI_TopoDS_1AlertWithShape_1Merge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  TopoDS_AlertWithShape *arg1 = (TopoDS_AlertWithShape *) 0 ;
  opencascade::handle< Message_Alert > *arg2 = 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_AlertWithShape **)&jarg1; 
  arg2 = *(opencascade::handle< Message_Alert > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "opencascade::handle< Message_Alert > const & reference is null");
    return 0;
  } 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->Merge((opencascade::handle< Message_Alert > const &)*arg2);
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "Merge", "TopoDS_AlertWithShape");
      SWIG_fail;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TopoDSJNI_TopoDS_1AlertWithShape_1SetShape(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TopoDS_AlertWithShape *arg1 = (TopoDS_AlertWithShape *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopoDS_AlertWithShape **)&jarg1; 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return ;
  } 
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->SetShape((TopoDS_Shape const &)*arg2);
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "SetShape", "TopoDS_AlertWithShape");
      SWIG_fail;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_TopoDSJNI_TopoDS_1AlertWithShape_1SupportsMerge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  TopoDS_AlertWithShape *arg1 = (TopoDS_AlertWithShape *) 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_AlertWithShape **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->SupportsMerge();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "SupportsMerge", "TopoDS_AlertWithShape");
      SWIG_fail;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TopoDSJNI_new_1TopoDS_1AlertWithShape(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopoDS_Shape *arg1 = 0 ;
  TopoDS_AlertWithShape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (TopoDS_AlertWithShape *)new TopoDS_AlertWithShape((TopoDS_Shape const &)*arg1);
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "TopoDS_AlertWithShape", "TopoDS_AlertWithShape");
      SWIG_fail;
    }
  }
  *(TopoDS_AlertWithShape **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TopoDSJNI_delete_1TopoDS_1AlertWithShape(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TopoDS_AlertWithShape *arg1 = (TopoDS_AlertWithShape *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TopoDS_AlertWithShape **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      delete arg1;
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "~TopoDS_AlertWithShape", "TopoDS_AlertWithShape");
      SWIG_fail;
    }
  }
}


SWIGEXPORT void JNICALL Java_TopoDSJNI_TopoDS_1Builder_1Add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  TopoDS_Builder *arg1 = (TopoDS_Builder *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  TopoDS_Shape *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(TopoDS_Builder **)&jarg1; 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape & reference is null");
    return ;
  } 
  arg3 = *(TopoDS_Shape **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return ;
  } 
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Add(*arg2,(TopoDS_Shape const &)*arg3);
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "Add", "TopoDS_Builder");
      SWIG_fail;
    }
  }
}


SWIGEXPORT void JNICALL Java_TopoDSJNI_TopoDS_1Builder_1MakeCompSolid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TopoDS_Builder *arg1 = (TopoDS_Builder *) 0 ;
  TopoDS_CompSolid *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopoDS_Builder **)&jarg1; 
  arg2 = *(TopoDS_CompSolid **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_CompSolid & reference is null");
    return ;
  } 
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->MakeCompSolid(*arg2);
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "MakeCompSolid", "TopoDS_Builder");
      SWIG_fail;
    }
  }
}


SWIGEXPORT void JNICALL Java_TopoDSJNI_TopoDS_1Builder_1MakeCompound(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TopoDS_Builder *arg1 = (TopoDS_Builder *) 0 ;
  TopoDS_Compound *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopoDS_Builder **)&jarg1; 
  arg2 = *(TopoDS_Compound **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Compound & reference is null");
    return ;
  } 
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->MakeCompound(*arg2);
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "MakeCompound", "TopoDS_Builder");
      SWIG_fail;
    }
  }
}


SWIGEXPORT void JNICALL Java_TopoDSJNI_TopoDS_1Builder_1MakeShell(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TopoDS_Builder *arg1 = (TopoDS_Builder *) 0 ;
  TopoDS_Shell *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopoDS_Builder **)&jarg1; 
  arg2 = *(TopoDS_Shell **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shell & reference is null");
    return ;
  } 
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->MakeShell(*arg2);
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "MakeShell", "TopoDS_Builder");
      SWIG_fail;
    }
  }
}


SWIGEXPORT void JNICALL Java_TopoDSJNI_TopoDS_1Builder_1MakeSolid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TopoDS_Builder *arg1 = (TopoDS_Builder *) 0 ;
  TopoDS_Solid *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopoDS_Builder **)&jarg1; 
  arg2 = *(TopoDS_Solid **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Solid & reference is null");
    return ;
  } 
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->MakeSolid(*arg2);
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "MakeSolid", "TopoDS_Builder");
      SWIG_fail;
    }
  }
}


SWIGEXPORT void JNICALL Java_TopoDSJNI_TopoDS_1Builder_1MakeWire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TopoDS_Builder *arg1 = (TopoDS_Builder *) 0 ;
  TopoDS_Wire *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopoDS_Builder **)&jarg1; 
  arg2 = *(TopoDS_Wire **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Wire & reference is null");
    return ;
  } 
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->MakeWire(*arg2);
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "MakeWire", "TopoDS_Builder");
      SWIG_fail;
    }
  }
}


SWIGEXPORT void JNICALL Java_TopoDSJNI_TopoDS_1Builder_1Remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  TopoDS_Builder *arg1 = (TopoDS_Builder *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  TopoDS_Shape *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(TopoDS_Builder **)&jarg1; 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape & reference is null");
    return ;
  } 
  arg3 = *(TopoDS_Shape **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return ;
  } 
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Remove(*arg2,(TopoDS_Shape const &)*arg3);
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "Remove", "TopoDS_Builder");
      SWIG_fail;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_TopoDSJNI_new_1TopoDS_1Builder(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TopoDS_Builder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (TopoDS_Builder *)new TopoDS_Builder();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "TopoDS_Builder", "TopoDS_Builder");
      SWIG_fail;
    }
  }
  *(TopoDS_Builder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TopoDSJNI_delete_1TopoDS_1Builder(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TopoDS_Builder *arg1 = (TopoDS_Builder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TopoDS_Builder **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      delete arg1;
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "~TopoDS_Builder", "TopoDS_Builder");
      SWIG_fail;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_TopoDSJNI_TopoDS_1HShape_1ChangeShape(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopoDS_HShape *arg1 = (TopoDS_HShape *) 0 ;
  TopoDS_Shape result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_HShape **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->ChangeShape();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "ChangeShape", "TopoDS_HShape");
      SWIG_fail;
    }
  }
  {
    TopoDS_Shape* sh = &result;
    PyObject *resultobj = 0;
    if (!sh || sh->IsNull()) {
      Py_RETURN_NONE;
    }
    else {
      TopAbs_ShapeEnum shape_type = sh->ShapeType();
      switch (shape_type)
      {
      case TopAbs_COMPOUND:
        resultobj = SWIG_NewPointerObj(new TopoDS_Compound(TopoDS::Compound(*sh)), SWIGTYPE_p_TopoDS_Compound, SWIG_POINTER_OWN |  0);
        break;
      case TopAbs_COMPSOLID:
        resultobj = SWIG_NewPointerObj(new TopoDS_CompSolid(TopoDS::CompSolid(*sh)), SWIGTYPE_p_TopoDS_CompSolid, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_SOLID:
        resultobj = SWIG_NewPointerObj(new TopoDS_Solid(TopoDS::Solid(*sh)), SWIGTYPE_p_TopoDS_Solid, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_SHELL:
        resultobj = SWIG_NewPointerObj(new TopoDS_Shell(TopoDS::Shell(*sh)), SWIGTYPE_p_TopoDS_Shell, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_FACE:
        resultobj = SWIG_NewPointerObj(new TopoDS_Face(TopoDS::Face(*sh)), SWIGTYPE_p_TopoDS_Face, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_WIRE:
        resultobj = SWIG_NewPointerObj(new TopoDS_Wire(TopoDS::Wire(*sh)), SWIGTYPE_p_TopoDS_Wire, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_EDGE:
        resultobj = SWIG_NewPointerObj(new TopoDS_Edge(TopoDS::Edge(*sh)), SWIGTYPE_p_TopoDS_Edge, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_VERTEX:
        resultobj = SWIG_NewPointerObj(new TopoDS_Vertex(TopoDS::Vertex(*sh)), SWIGTYPE_p_TopoDS_Vertex, SWIG_POINTER_OWN |  0 );
        break;
      default:
        break;
      }
    }
    return resultobj;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_TopoDSJNI_TopoDS_1HShape_1Shape_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TopoDS_HShape *arg1 = (TopoDS_HShape *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopoDS_HShape **)&jarg1; 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return ;
  } 
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Shape((TopoDS_Shape const &)*arg2);
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "Shape", "TopoDS_HShape");
      SWIG_fail;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_TopoDSJNI_TopoDS_1HShape_1Shape_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopoDS_HShape *arg1 = (TopoDS_HShape *) 0 ;
  TopoDS_Shape result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_HShape **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Shape();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "Shape", "TopoDS_HShape");
      SWIG_fail;
    }
  }
  {
    TopoDS_Shape* sh = &result;
    PyObject *resultobj = 0;
    if (!sh || sh->IsNull()) {
      Py_RETURN_NONE;
    }
    else {
      TopAbs_ShapeEnum shape_type = sh->ShapeType();
      switch (shape_type)
      {
      case TopAbs_COMPOUND:
        resultobj = SWIG_NewPointerObj(new TopoDS_Compound(TopoDS::Compound(*sh)), SWIGTYPE_p_TopoDS_Compound, SWIG_POINTER_OWN |  0);
        break;
      case TopAbs_COMPSOLID:
        resultobj = SWIG_NewPointerObj(new TopoDS_CompSolid(TopoDS::CompSolid(*sh)), SWIGTYPE_p_TopoDS_CompSolid, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_SOLID:
        resultobj = SWIG_NewPointerObj(new TopoDS_Solid(TopoDS::Solid(*sh)), SWIGTYPE_p_TopoDS_Solid, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_SHELL:
        resultobj = SWIG_NewPointerObj(new TopoDS_Shell(TopoDS::Shell(*sh)), SWIGTYPE_p_TopoDS_Shell, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_FACE:
        resultobj = SWIG_NewPointerObj(new TopoDS_Face(TopoDS::Face(*sh)), SWIGTYPE_p_TopoDS_Face, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_WIRE:
        resultobj = SWIG_NewPointerObj(new TopoDS_Wire(TopoDS::Wire(*sh)), SWIGTYPE_p_TopoDS_Wire, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_EDGE:
        resultobj = SWIG_NewPointerObj(new TopoDS_Edge(TopoDS::Edge(*sh)), SWIGTYPE_p_TopoDS_Edge, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_VERTEX:
        resultobj = SWIG_NewPointerObj(new TopoDS_Vertex(TopoDS::Vertex(*sh)), SWIGTYPE_p_TopoDS_Vertex, SWIG_POINTER_OWN |  0 );
        break;
      default:
        break;
      }
    }
    return resultobj;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TopoDSJNI_new_1TopoDS_1HShape_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TopoDS_HShape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (TopoDS_HShape *)new TopoDS_HShape();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "TopoDS_HShape", "TopoDS_HShape");
      SWIG_fail;
    }
  }
  *(TopoDS_HShape **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TopoDSJNI_new_1TopoDS_1HShape_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopoDS_Shape *arg1 = 0 ;
  TopoDS_HShape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (TopoDS_HShape *)new TopoDS_HShape((TopoDS_Shape const &)*arg1);
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "TopoDS_HShape", "TopoDS_HShape");
      SWIG_fail;
    }
  }
  *(TopoDS_HShape **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TopoDSJNI_delete_1TopoDS_1HShape(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TopoDS_HShape *arg1 = (TopoDS_HShape *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TopoDS_HShape **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      delete arg1;
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "~TopoDS_HShape", "TopoDS_HShape");
      SWIG_fail;
    }
  }
}


SWIGEXPORT void JNICALL Java_TopoDSJNI_TopoDS_1Iterator_1Initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jboolean jarg4) {
  TopoDS_Iterator *arg1 = (TopoDS_Iterator *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  Standard_Boolean arg3 = (Standard_Boolean) (Standard_Boolean)Standard_True ;
  Standard_Boolean arg4 = (Standard_Boolean) (Standard_Boolean)Standard_True ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopoDS_Iterator **)&jarg1; 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Initialize((TopoDS_Shape const &)*arg2,arg3,arg4);
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "Initialize", "TopoDS_Iterator");
      SWIG_fail;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_TopoDSJNI_TopoDS_1Iterator_1More(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  TopoDS_Iterator *arg1 = (TopoDS_Iterator *) 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Iterator **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->More();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "More", "TopoDS_Iterator");
      SWIG_fail;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TopoDSJNI_TopoDS_1Iterator_1Next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  TopoDS_Iterator *arg1 = (TopoDS_Iterator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Iterator **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Next();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "Next", "TopoDS_Iterator");
      SWIG_fail;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_TopoDSJNI_new_1TopoDS_1Iterator_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TopoDS_Iterator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (TopoDS_Iterator *)new TopoDS_Iterator();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "TopoDS_Iterator", "TopoDS_Iterator");
      SWIG_fail;
    }
  }
  *(TopoDS_Iterator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TopoDSJNI_new_1TopoDS_1Iterator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  TopoDS_Shape *arg1 = 0 ;
  Standard_Boolean arg2 = (Standard_Boolean) (Standard_Boolean)Standard_True ;
  Standard_Boolean arg3 = (Standard_Boolean) (Standard_Boolean)Standard_True ;
  TopoDS_Iterator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (TopoDS_Iterator *)new TopoDS_Iterator((TopoDS_Shape const &)*arg1,arg2,arg3);
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "TopoDS_Iterator", "TopoDS_Iterator");
      SWIG_fail;
    }
  }
  *(TopoDS_Iterator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TopoDSJNI_TopoDS_1Iterator_1Value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopoDS_Iterator *arg1 = (TopoDS_Iterator *) 0 ;
  TopoDS_Shape result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Iterator **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Value();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "Value", "TopoDS_Iterator");
      SWIG_fail;
    }
  }
  {
    TopoDS_Shape* sh = &result;
    PyObject *resultobj = 0;
    if (!sh || sh->IsNull()) {
      Py_RETURN_NONE;
    }
    else {
      TopAbs_ShapeEnum shape_type = sh->ShapeType();
      switch (shape_type)
      {
      case TopAbs_COMPOUND:
        resultobj = SWIG_NewPointerObj(new TopoDS_Compound(TopoDS::Compound(*sh)), SWIGTYPE_p_TopoDS_Compound, SWIG_POINTER_OWN |  0);
        break;
      case TopAbs_COMPSOLID:
        resultobj = SWIG_NewPointerObj(new TopoDS_CompSolid(TopoDS::CompSolid(*sh)), SWIGTYPE_p_TopoDS_CompSolid, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_SOLID:
        resultobj = SWIG_NewPointerObj(new TopoDS_Solid(TopoDS::Solid(*sh)), SWIGTYPE_p_TopoDS_Solid, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_SHELL:
        resultobj = SWIG_NewPointerObj(new TopoDS_Shell(TopoDS::Shell(*sh)), SWIGTYPE_p_TopoDS_Shell, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_FACE:
        resultobj = SWIG_NewPointerObj(new TopoDS_Face(TopoDS::Face(*sh)), SWIGTYPE_p_TopoDS_Face, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_WIRE:
        resultobj = SWIG_NewPointerObj(new TopoDS_Wire(TopoDS::Wire(*sh)), SWIGTYPE_p_TopoDS_Wire, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_EDGE:
        resultobj = SWIG_NewPointerObj(new TopoDS_Edge(TopoDS::Edge(*sh)), SWIGTYPE_p_TopoDS_Edge, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_VERTEX:
        resultobj = SWIG_NewPointerObj(new TopoDS_Vertex(TopoDS::Vertex(*sh)), SWIGTYPE_p_TopoDS_Vertex, SWIG_POINTER_OWN |  0 );
        break;
      default:
        break;
      }
    }
    return resultobj;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_TopoDSJNI_delete_1TopoDS_1Iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TopoDS_Iterator *arg1 = (TopoDS_Iterator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TopoDS_Iterator **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      delete arg1;
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "~TopoDS_Iterator", "TopoDS_Iterator");
      SWIG_fail;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_TopoDSJNI_new_1TopoDS_1Shape_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopoDS_Shape arg1 ;
  TopoDS_Shape const *argp1 ;
  TopoDS_Shape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(TopoDS_Shape **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null TopoDS_Shape const");
    return 0;
  }
  arg1 = *argp1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (TopoDS_Shape *)new TopoDS_Shape(arg1);
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "TopoDS_Shape", "TopoDS_Shape");
      SWIG_fail;
    }
  }
  *(TopoDS_Shape **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_TopoDSJNI_TopoDS_1Shape_1Checked_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->Checked();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "Checked", "TopoDS_Shape");
      SWIG_fail;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TopoDSJNI_TopoDS_1Shape_1Checked_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  Standard_Boolean arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Checked(arg2);
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "Checked", "TopoDS_Shape");
      SWIG_fail;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_TopoDSJNI_TopoDS_1Shape_1Closed_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->Closed();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "Closed", "TopoDS_Shape");
      SWIG_fail;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TopoDSJNI_TopoDS_1Shape_1Closed_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  Standard_Boolean arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Closed(arg2);
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "Closed", "TopoDS_Shape");
      SWIG_fail;
    }
  }
}


SWIGEXPORT void JNICALL Java_TopoDSJNI_TopoDS_1Shape_1Complement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Complement();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "Complement", "TopoDS_Shape");
      SWIG_fail;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_TopoDSJNI_TopoDS_1Shape_1Complemented(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  TopoDS_Shape result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Complemented();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "Complemented", "TopoDS_Shape");
      SWIG_fail;
    }
  }
  {
    TopoDS_Shape* sh = &result;
    PyObject *resultobj = 0;
    if (!sh || sh->IsNull()) {
      Py_RETURN_NONE;
    }
    else {
      TopAbs_ShapeEnum shape_type = sh->ShapeType();
      switch (shape_type)
      {
      case TopAbs_COMPOUND:
        resultobj = SWIG_NewPointerObj(new TopoDS_Compound(TopoDS::Compound(*sh)), SWIGTYPE_p_TopoDS_Compound, SWIG_POINTER_OWN |  0);
        break;
      case TopAbs_COMPSOLID:
        resultobj = SWIG_NewPointerObj(new TopoDS_CompSolid(TopoDS::CompSolid(*sh)), SWIGTYPE_p_TopoDS_CompSolid, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_SOLID:
        resultobj = SWIG_NewPointerObj(new TopoDS_Solid(TopoDS::Solid(*sh)), SWIGTYPE_p_TopoDS_Solid, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_SHELL:
        resultobj = SWIG_NewPointerObj(new TopoDS_Shell(TopoDS::Shell(*sh)), SWIGTYPE_p_TopoDS_Shell, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_FACE:
        resultobj = SWIG_NewPointerObj(new TopoDS_Face(TopoDS::Face(*sh)), SWIGTYPE_p_TopoDS_Face, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_WIRE:
        resultobj = SWIG_NewPointerObj(new TopoDS_Wire(TopoDS::Wire(*sh)), SWIGTYPE_p_TopoDS_Wire, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_EDGE:
        resultobj = SWIG_NewPointerObj(new TopoDS_Edge(TopoDS::Edge(*sh)), SWIGTYPE_p_TopoDS_Edge, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_VERTEX:
        resultobj = SWIG_NewPointerObj(new TopoDS_Vertex(TopoDS::Vertex(*sh)), SWIGTYPE_p_TopoDS_Vertex, SWIG_POINTER_OWN |  0 );
        break;
      default:
        break;
      }
    }
    return resultobj;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_TopoDSJNI_TopoDS_1Shape_1Compose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  TopAbs_Orientation arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1; 
  arg2 = (TopAbs_Orientation)jarg2; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Compose(arg2);
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "Compose", "TopoDS_Shape");
      SWIG_fail;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_TopoDSJNI_TopoDS_1Shape_1Composed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  TopAbs_Orientation arg2 ;
  TopoDS_Shape result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1; 
  arg2 = (TopAbs_Orientation)jarg2; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Composed(arg2);
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "Composed", "TopoDS_Shape");
      SWIG_fail;
    }
  }
  {
    TopoDS_Shape* sh = &result;
    PyObject *resultobj = 0;
    if (!sh || sh->IsNull()) {
      Py_RETURN_NONE;
    }
    else {
      TopAbs_ShapeEnum shape_type = sh->ShapeType();
      switch (shape_type)
      {
      case TopAbs_COMPOUND:
        resultobj = SWIG_NewPointerObj(new TopoDS_Compound(TopoDS::Compound(*sh)), SWIGTYPE_p_TopoDS_Compound, SWIG_POINTER_OWN |  0);
        break;
      case TopAbs_COMPSOLID:
        resultobj = SWIG_NewPointerObj(new TopoDS_CompSolid(TopoDS::CompSolid(*sh)), SWIGTYPE_p_TopoDS_CompSolid, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_SOLID:
        resultobj = SWIG_NewPointerObj(new TopoDS_Solid(TopoDS::Solid(*sh)), SWIGTYPE_p_TopoDS_Solid, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_SHELL:
        resultobj = SWIG_NewPointerObj(new TopoDS_Shell(TopoDS::Shell(*sh)), SWIGTYPE_p_TopoDS_Shell, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_FACE:
        resultobj = SWIG_NewPointerObj(new TopoDS_Face(TopoDS::Face(*sh)), SWIGTYPE_p_TopoDS_Face, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_WIRE:
        resultobj = SWIG_NewPointerObj(new TopoDS_Wire(TopoDS::Wire(*sh)), SWIGTYPE_p_TopoDS_Wire, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_EDGE:
        resultobj = SWIG_NewPointerObj(new TopoDS_Edge(TopoDS::Edge(*sh)), SWIGTYPE_p_TopoDS_Edge, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_VERTEX:
        resultobj = SWIG_NewPointerObj(new TopoDS_Vertex(TopoDS::Vertex(*sh)), SWIGTYPE_p_TopoDS_Vertex, SWIG_POINTER_OWN |  0 );
        break;
      default:
        break;
      }
    }
    return resultobj;
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_TopoDSJNI_TopoDS_1Shape_1Convex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->Convex();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "Convex", "TopoDS_Shape");
      SWIG_fail;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TopoDSJNI_TopoDS_1Shape_1Convex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  Standard_Boolean arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Convex(arg2);
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "Convex", "TopoDS_Shape");
      SWIG_fail;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_TopoDSJNI_TopoDS_1Shape_1DumpJsonToString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = TopoDS_Shape_DumpJsonToString__SWIG_0(arg1,arg2);
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "DumpJsonToString", "");
      SWIG_fail;
    }
  }
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TopoDSJNI_TopoDS_1Shape_1DumpJsonToString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = TopoDS_Shape_DumpJsonToString__SWIG_0(arg1);
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "DumpJsonToString", "");
      SWIG_fail;
    }
  }
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TopoDSJNI_TopoDS_1Shape_1EmptyCopied(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  TopoDS_Shape result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->EmptyCopied();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "EmptyCopied", "TopoDS_Shape");
      SWIG_fail;
    }
  }
  {
    TopoDS_Shape* sh = &result;
    PyObject *resultobj = 0;
    if (!sh || sh->IsNull()) {
      Py_RETURN_NONE;
    }
    else {
      TopAbs_ShapeEnum shape_type = sh->ShapeType();
      switch (shape_type)
      {
      case TopAbs_COMPOUND:
        resultobj = SWIG_NewPointerObj(new TopoDS_Compound(TopoDS::Compound(*sh)), SWIGTYPE_p_TopoDS_Compound, SWIG_POINTER_OWN |  0);
        break;
      case TopAbs_COMPSOLID:
        resultobj = SWIG_NewPointerObj(new TopoDS_CompSolid(TopoDS::CompSolid(*sh)), SWIGTYPE_p_TopoDS_CompSolid, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_SOLID:
        resultobj = SWIG_NewPointerObj(new TopoDS_Solid(TopoDS::Solid(*sh)), SWIGTYPE_p_TopoDS_Solid, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_SHELL:
        resultobj = SWIG_NewPointerObj(new TopoDS_Shell(TopoDS::Shell(*sh)), SWIGTYPE_p_TopoDS_Shell, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_FACE:
        resultobj = SWIG_NewPointerObj(new TopoDS_Face(TopoDS::Face(*sh)), SWIGTYPE_p_TopoDS_Face, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_WIRE:
        resultobj = SWIG_NewPointerObj(new TopoDS_Wire(TopoDS::Wire(*sh)), SWIGTYPE_p_TopoDS_Wire, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_EDGE:
        resultobj = SWIG_NewPointerObj(new TopoDS_Edge(TopoDS::Edge(*sh)), SWIGTYPE_p_TopoDS_Edge, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_VERTEX:
        resultobj = SWIG_NewPointerObj(new TopoDS_Vertex(TopoDS::Vertex(*sh)), SWIGTYPE_p_TopoDS_Vertex, SWIG_POINTER_OWN |  0 );
        break;
      default:
        break;
      }
    }
    return resultobj;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_TopoDSJNI_TopoDS_1Shape_1EmptyCopy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->EmptyCopy();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "EmptyCopy", "TopoDS_Shape");
      SWIG_fail;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_TopoDSJNI_TopoDS_1Shape_1Free_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->Free();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "Free", "TopoDS_Shape");
      SWIG_fail;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TopoDSJNI_TopoDS_1Shape_1Free_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  Standard_Boolean arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Free(arg2);
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "Free", "TopoDS_Shape");
      SWIG_fail;
    }
  }
}


SWIGEXPORT jint JNICALL Java_TopoDSJNI_TopoDS_1Shape_1HashCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  Standard_Integer arg2 ;
  Standard_Integer result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1; 
  arg2 = (Standard_Integer)jarg2; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Integer)(arg1)->HashCode(arg2);
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "HashCode", "TopoDS_Shape");
      SWIG_fail;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TopoDSJNI_TopoDS_1Shape_1_1_1hash_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  Standard_Integer result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Integer)TopoDS_Shape___hash__(arg1);
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "__hash__", "");
      SWIG_fail;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_TopoDSJNI_TopoDS_1Shape_1Infinite_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->Infinite();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "Infinite", "TopoDS_Shape");
      SWIG_fail;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TopoDSJNI_TopoDS_1Shape_1Infinite_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  Standard_Boolean arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Infinite(arg2);
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "Infinite", "TopoDS_Shape");
      SWIG_fail;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_TopoDSJNI_TopoDS_1Shape_1IsEqual(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopoDS_Shape **)&jarg1; 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->IsEqual((TopoDS_Shape const &)*arg2);
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "IsEqual", "TopoDS_Shape");
      SWIG_fail;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_TopoDSJNI_TopoDS_1Shape_1IsNotEqual(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopoDS_Shape **)&jarg1; 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->IsNotEqual((TopoDS_Shape const &)*arg2);
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "IsNotEqual", "TopoDS_Shape");
      SWIG_fail;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_TopoDSJNI_TopoDS_1Shape_1IsNull(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->IsNull();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "IsNull", "TopoDS_Shape");
      SWIG_fail;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_TopoDSJNI_TopoDS_1Shape_1IsPartner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopoDS_Shape **)&jarg1; 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->IsPartner((TopoDS_Shape const &)*arg2);
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "IsPartner", "TopoDS_Shape");
      SWIG_fail;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_TopoDSJNI_TopoDS_1Shape_1IsSame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopoDS_Shape **)&jarg1; 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->IsSame((TopoDS_Shape const &)*arg2);
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "IsSame", "TopoDS_Shape");
      SWIG_fail;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TopoDSJNI_TopoDS_1Shape_1Located(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  TopLoc_Location *arg2 = 0 ;
  TopoDS_Shape result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopoDS_Shape **)&jarg1; 
  arg2 = *(TopLoc_Location **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopLoc_Location const & reference is null");
    return 0;
  } 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Located((TopLoc_Location const &)*arg2);
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "Located", "TopoDS_Shape");
      SWIG_fail;
    }
  }
  {
    TopoDS_Shape* sh = &result;
    PyObject *resultobj = 0;
    if (!sh || sh->IsNull()) {
      Py_RETURN_NONE;
    }
    else {
      TopAbs_ShapeEnum shape_type = sh->ShapeType();
      switch (shape_type)
      {
      case TopAbs_COMPOUND:
        resultobj = SWIG_NewPointerObj(new TopoDS_Compound(TopoDS::Compound(*sh)), SWIGTYPE_p_TopoDS_Compound, SWIG_POINTER_OWN |  0);
        break;
      case TopAbs_COMPSOLID:
        resultobj = SWIG_NewPointerObj(new TopoDS_CompSolid(TopoDS::CompSolid(*sh)), SWIGTYPE_p_TopoDS_CompSolid, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_SOLID:
        resultobj = SWIG_NewPointerObj(new TopoDS_Solid(TopoDS::Solid(*sh)), SWIGTYPE_p_TopoDS_Solid, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_SHELL:
        resultobj = SWIG_NewPointerObj(new TopoDS_Shell(TopoDS::Shell(*sh)), SWIGTYPE_p_TopoDS_Shell, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_FACE:
        resultobj = SWIG_NewPointerObj(new TopoDS_Face(TopoDS::Face(*sh)), SWIGTYPE_p_TopoDS_Face, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_WIRE:
        resultobj = SWIG_NewPointerObj(new TopoDS_Wire(TopoDS::Wire(*sh)), SWIGTYPE_p_TopoDS_Wire, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_EDGE:
        resultobj = SWIG_NewPointerObj(new TopoDS_Edge(TopoDS::Edge(*sh)), SWIGTYPE_p_TopoDS_Edge, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_VERTEX:
        resultobj = SWIG_NewPointerObj(new TopoDS_Vertex(TopoDS::Vertex(*sh)), SWIGTYPE_p_TopoDS_Vertex, SWIG_POINTER_OWN |  0 );
        break;
      default:
        break;
      }
    }
    return resultobj;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TopoDSJNI_TopoDS_1Shape_1Location_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  TopLoc_Location *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (TopLoc_Location *) &(arg1)->Location();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "Location", "TopoDS_Shape");
      SWIG_fail;
    }
  }
  *(TopLoc_Location **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TopoDSJNI_TopoDS_1Shape_1Location_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  TopLoc_Location *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopoDS_Shape **)&jarg1; 
  arg2 = *(TopLoc_Location **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopLoc_Location const & reference is null");
    return ;
  } 
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Location((TopLoc_Location const &)*arg2);
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "Location", "TopoDS_Shape");
      SWIG_fail;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_TopoDSJNI_TopoDS_1Shape_1Locked_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->Locked();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "Locked", "TopoDS_Shape");
      SWIG_fail;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TopoDSJNI_TopoDS_1Shape_1Locked_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  Standard_Boolean arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Locked(arg2);
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "Locked", "TopoDS_Shape");
      SWIG_fail;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_TopoDSJNI_TopoDS_1Shape_1Modified_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->Modified();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "Modified", "TopoDS_Shape");
      SWIG_fail;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TopoDSJNI_TopoDS_1Shape_1Modified_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  Standard_Boolean arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Modified(arg2);
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "Modified", "TopoDS_Shape");
      SWIG_fail;
    }
  }
}


SWIGEXPORT void JNICALL Java_TopoDSJNI_TopoDS_1Shape_1Move(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  TopLoc_Location *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopoDS_Shape **)&jarg1; 
  arg2 = *(TopLoc_Location **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopLoc_Location const & reference is null");
    return ;
  } 
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Move((TopLoc_Location const &)*arg2);
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "Move", "TopoDS_Shape");
      SWIG_fail;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_TopoDSJNI_TopoDS_1Shape_1Moved(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  TopLoc_Location *arg2 = 0 ;
  TopoDS_Shape result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopoDS_Shape **)&jarg1; 
  arg2 = *(TopLoc_Location **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopLoc_Location const & reference is null");
    return 0;
  } 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Moved((TopLoc_Location const &)*arg2);
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "Moved", "TopoDS_Shape");
      SWIG_fail;
    }
  }
  {
    TopoDS_Shape* sh = &result;
    PyObject *resultobj = 0;
    if (!sh || sh->IsNull()) {
      Py_RETURN_NONE;
    }
    else {
      TopAbs_ShapeEnum shape_type = sh->ShapeType();
      switch (shape_type)
      {
      case TopAbs_COMPOUND:
        resultobj = SWIG_NewPointerObj(new TopoDS_Compound(TopoDS::Compound(*sh)), SWIGTYPE_p_TopoDS_Compound, SWIG_POINTER_OWN |  0);
        break;
      case TopAbs_COMPSOLID:
        resultobj = SWIG_NewPointerObj(new TopoDS_CompSolid(TopoDS::CompSolid(*sh)), SWIGTYPE_p_TopoDS_CompSolid, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_SOLID:
        resultobj = SWIG_NewPointerObj(new TopoDS_Solid(TopoDS::Solid(*sh)), SWIGTYPE_p_TopoDS_Solid, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_SHELL:
        resultobj = SWIG_NewPointerObj(new TopoDS_Shell(TopoDS::Shell(*sh)), SWIGTYPE_p_TopoDS_Shell, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_FACE:
        resultobj = SWIG_NewPointerObj(new TopoDS_Face(TopoDS::Face(*sh)), SWIGTYPE_p_TopoDS_Face, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_WIRE:
        resultobj = SWIG_NewPointerObj(new TopoDS_Wire(TopoDS::Wire(*sh)), SWIGTYPE_p_TopoDS_Wire, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_EDGE:
        resultobj = SWIG_NewPointerObj(new TopoDS_Edge(TopoDS::Edge(*sh)), SWIGTYPE_p_TopoDS_Edge, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_VERTEX:
        resultobj = SWIG_NewPointerObj(new TopoDS_Vertex(TopoDS::Vertex(*sh)), SWIGTYPE_p_TopoDS_Vertex, SWIG_POINTER_OWN |  0 );
        break;
      default:
        break;
      }
    }
    return resultobj;
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TopoDSJNI_TopoDS_1Shape_1NbChildren(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  Standard_Integer result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Integer)(arg1)->NbChildren();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "NbChildren", "TopoDS_Shape");
      SWIG_fail;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TopoDSJNI_TopoDS_1Shape_1Nullify(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Nullify();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "Nullify", "TopoDS_Shape");
      SWIG_fail;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_TopoDSJNI_TopoDS_1Shape_1Orientable_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->Orientable();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "Orientable", "TopoDS_Shape");
      SWIG_fail;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TopoDSJNI_TopoDS_1Shape_1Orientable_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  Standard_Boolean arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Orientable(arg2);
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "Orientable", "TopoDS_Shape");
      SWIG_fail;
    }
  }
}


SWIGEXPORT jint JNICALL Java_TopoDSJNI_TopoDS_1Shape_1Orientation_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  TopAbs_Orientation result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (TopAbs_Orientation)(arg1)->Orientation();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "Orientation", "TopoDS_Shape");
      SWIG_fail;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TopoDSJNI_TopoDS_1Shape_1Orientation_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  TopAbs_Orientation arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1; 
  arg2 = (TopAbs_Orientation)jarg2; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Orientation(arg2);
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "Orientation", "TopoDS_Shape");
      SWIG_fail;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_TopoDSJNI_TopoDS_1Shape_1Oriented(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  TopAbs_Orientation arg2 ;
  TopoDS_Shape result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1; 
  arg2 = (TopAbs_Orientation)jarg2; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Oriented(arg2);
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "Oriented", "TopoDS_Shape");
      SWIG_fail;
    }
  }
  {
    TopoDS_Shape* sh = &result;
    PyObject *resultobj = 0;
    if (!sh || sh->IsNull()) {
      Py_RETURN_NONE;
    }
    else {
      TopAbs_ShapeEnum shape_type = sh->ShapeType();
      switch (shape_type)
      {
      case TopAbs_COMPOUND:
        resultobj = SWIG_NewPointerObj(new TopoDS_Compound(TopoDS::Compound(*sh)), SWIGTYPE_p_TopoDS_Compound, SWIG_POINTER_OWN |  0);
        break;
      case TopAbs_COMPSOLID:
        resultobj = SWIG_NewPointerObj(new TopoDS_CompSolid(TopoDS::CompSolid(*sh)), SWIGTYPE_p_TopoDS_CompSolid, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_SOLID:
        resultobj = SWIG_NewPointerObj(new TopoDS_Solid(TopoDS::Solid(*sh)), SWIGTYPE_p_TopoDS_Solid, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_SHELL:
        resultobj = SWIG_NewPointerObj(new TopoDS_Shell(TopoDS::Shell(*sh)), SWIGTYPE_p_TopoDS_Shell, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_FACE:
        resultobj = SWIG_NewPointerObj(new TopoDS_Face(TopoDS::Face(*sh)), SWIGTYPE_p_TopoDS_Face, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_WIRE:
        resultobj = SWIG_NewPointerObj(new TopoDS_Wire(TopoDS::Wire(*sh)), SWIGTYPE_p_TopoDS_Wire, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_EDGE:
        resultobj = SWIG_NewPointerObj(new TopoDS_Edge(TopoDS::Edge(*sh)), SWIGTYPE_p_TopoDS_Edge, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_VERTEX:
        resultobj = SWIG_NewPointerObj(new TopoDS_Vertex(TopoDS::Vertex(*sh)), SWIGTYPE_p_TopoDS_Vertex, SWIG_POINTER_OWN |  0 );
        break;
      default:
        break;
      }
    }
    return resultobj;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_TopoDSJNI_TopoDS_1Shape_1Reverse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Reverse();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "Reverse", "TopoDS_Shape");
      SWIG_fail;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_TopoDSJNI_TopoDS_1Shape_1Reversed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  TopoDS_Shape result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Reversed();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "Reversed", "TopoDS_Shape");
      SWIG_fail;
    }
  }
  {
    TopoDS_Shape* sh = &result;
    PyObject *resultobj = 0;
    if (!sh || sh->IsNull()) {
      Py_RETURN_NONE;
    }
    else {
      TopAbs_ShapeEnum shape_type = sh->ShapeType();
      switch (shape_type)
      {
      case TopAbs_COMPOUND:
        resultobj = SWIG_NewPointerObj(new TopoDS_Compound(TopoDS::Compound(*sh)), SWIGTYPE_p_TopoDS_Compound, SWIG_POINTER_OWN |  0);
        break;
      case TopAbs_COMPSOLID:
        resultobj = SWIG_NewPointerObj(new TopoDS_CompSolid(TopoDS::CompSolid(*sh)), SWIGTYPE_p_TopoDS_CompSolid, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_SOLID:
        resultobj = SWIG_NewPointerObj(new TopoDS_Solid(TopoDS::Solid(*sh)), SWIGTYPE_p_TopoDS_Solid, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_SHELL:
        resultobj = SWIG_NewPointerObj(new TopoDS_Shell(TopoDS::Shell(*sh)), SWIGTYPE_p_TopoDS_Shell, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_FACE:
        resultobj = SWIG_NewPointerObj(new TopoDS_Face(TopoDS::Face(*sh)), SWIGTYPE_p_TopoDS_Face, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_WIRE:
        resultobj = SWIG_NewPointerObj(new TopoDS_Wire(TopoDS::Wire(*sh)), SWIGTYPE_p_TopoDS_Wire, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_EDGE:
        resultobj = SWIG_NewPointerObj(new TopoDS_Edge(TopoDS::Edge(*sh)), SWIGTYPE_p_TopoDS_Edge, SWIG_POINTER_OWN |  0 );
        break;
      case TopAbs_VERTEX:
        resultobj = SWIG_NewPointerObj(new TopoDS_Vertex(TopoDS::Vertex(*sh)), SWIGTYPE_p_TopoDS_Vertex, SWIG_POINTER_OWN |  0 );
        break;
      default:
        break;
      }
    }
    return resultobj;
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TopoDSJNI_TopoDS_1Shape_1ShapeType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  TopAbs_ShapeEnum result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (TopAbs_ShapeEnum)(arg1)->ShapeType();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "ShapeType", "TopoDS_Shape");
      SWIG_fail;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TopoDSJNI_TopoDS_1Shape_1TShape_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  SwigValueWrapper< opencascade::handle< TopoDS_TShape > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->TShape();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "TShape", "TopoDS_Shape");
      SWIG_fail;
    }
  }
  *(opencascade::handle< TopoDS_TShape > **)&jresult = new opencascade::handle< TopoDS_TShape >((const opencascade::handle< TopoDS_TShape > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TopoDSJNI_TopoDS_1Shape_1TShape_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  opencascade::handle< TopoDS_TShape > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1; 
  arg2 = *(opencascade::handle< TopoDS_TShape > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "opencascade::handle< TopoDS_TShape > const & reference is null");
    return ;
  } 
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->TShape((opencascade::handle< TopoDS_TShape > const &)*arg2);
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "TShape", "TopoDS_Shape");
      SWIG_fail;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_TopoDSJNI_new_1TopoDS_1Shape_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TopoDS_Shape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (TopoDS_Shape *)new TopoDS_Shape();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "TopoDS_Shape", "TopoDS_Shape");
      SWIG_fail;
    }
  }
  *(TopoDS_Shape **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_TopoDSJNI_TopoDS_1Shape_1_1_1eq_1wrapper_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  TopoDS_Shape arg2 ;
  TopoDS_Shape const *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopoDS_Shape **)&jarg1; 
  argp2 = *(TopoDS_Shape **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null TopoDS_Shape const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (bool)TopoDS_Shape___eq_wrapper__(arg1,arg2);
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "__eq_wrapper__", "");
      SWIG_fail;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TopoDSJNI_delete_1TopoDS_1Shape(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TopoDS_Shape **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      delete arg1;
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "~TopoDS_Shape", "TopoDS_Shape");
      SWIG_fail;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_TopoDSJNI_TopoDS_1TShape_1Checked_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  TopoDS_TShape *arg1 = (TopoDS_TShape *) 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_TShape **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->Checked();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "Checked", "TopoDS_TShape");
      SWIG_fail;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TopoDSJNI_TopoDS_1TShape_1Checked_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  TopoDS_TShape *arg1 = (TopoDS_TShape *) 0 ;
  Standard_Boolean arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_TShape **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Checked(arg2);
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "Checked", "TopoDS_TShape");
      SWIG_fail;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_TopoDSJNI_TopoDS_1TShape_1Closed_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  TopoDS_TShape *arg1 = (TopoDS_TShape *) 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_TShape **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->Closed();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "Closed", "TopoDS_TShape");
      SWIG_fail;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TopoDSJNI_TopoDS_1TShape_1Closed_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  TopoDS_TShape *arg1 = (TopoDS_TShape *) 0 ;
  Standard_Boolean arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_TShape **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Closed(arg2);
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "Closed", "TopoDS_TShape");
      SWIG_fail;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_TopoDSJNI_TopoDS_1TShape_1Convex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  TopoDS_TShape *arg1 = (TopoDS_TShape *) 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_TShape **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->Convex();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "Convex", "TopoDS_TShape");
      SWIG_fail;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TopoDSJNI_TopoDS_1TShape_1Convex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  TopoDS_TShape *arg1 = (TopoDS_TShape *) 0 ;
  Standard_Boolean arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_TShape **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Convex(arg2);
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "Convex", "TopoDS_TShape");
      SWIG_fail;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_TopoDSJNI_TopoDS_1TShape_1DumpJsonToString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  TopoDS_TShape *arg1 = (TopoDS_TShape *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_TShape **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = TopoDS_TShape_DumpJsonToString__SWIG_0(arg1,arg2);
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "DumpJsonToString", "");
      SWIG_fail;
    }
  }
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TopoDSJNI_TopoDS_1TShape_1DumpJsonToString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopoDS_TShape *arg1 = (TopoDS_TShape *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_TShape **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = TopoDS_TShape_DumpJsonToString__SWIG_0(arg1);
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "DumpJsonToString", "");
      SWIG_fail;
    }
  }
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TopoDSJNI_TopoDS_1TShape_1EmptyCopy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopoDS_TShape *arg1 = (TopoDS_TShape *) 0 ;
  SwigValueWrapper< opencascade::handle< TopoDS_TShape > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_TShape **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->EmptyCopy();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "EmptyCopy", "TopoDS_TShape");
      SWIG_fail;
    }
  }
  *(opencascade::handle< TopoDS_TShape > **)&jresult = new opencascade::handle< TopoDS_TShape >((const opencascade::handle< TopoDS_TShape > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_TopoDSJNI_TopoDS_1TShape_1Free_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  TopoDS_TShape *arg1 = (TopoDS_TShape *) 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_TShape **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->Free();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "Free", "TopoDS_TShape");
      SWIG_fail;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TopoDSJNI_TopoDS_1TShape_1Free_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  TopoDS_TShape *arg1 = (TopoDS_TShape *) 0 ;
  Standard_Boolean arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_TShape **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Free(arg2);
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "Free", "TopoDS_TShape");
      SWIG_fail;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_TopoDSJNI_TopoDS_1TShape_1Infinite_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  TopoDS_TShape *arg1 = (TopoDS_TShape *) 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_TShape **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->Infinite();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "Infinite", "TopoDS_TShape");
      SWIG_fail;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TopoDSJNI_TopoDS_1TShape_1Infinite_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  TopoDS_TShape *arg1 = (TopoDS_TShape *) 0 ;
  Standard_Boolean arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_TShape **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Infinite(arg2);
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "Infinite", "TopoDS_TShape");
      SWIG_fail;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_TopoDSJNI_TopoDS_1TShape_1Locked_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  TopoDS_TShape *arg1 = (TopoDS_TShape *) 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_TShape **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->Locked();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "Locked", "TopoDS_TShape");
      SWIG_fail;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TopoDSJNI_TopoDS_1TShape_1Locked_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  TopoDS_TShape *arg1 = (TopoDS_TShape *) 0 ;
  Standard_Boolean arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_TShape **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Locked(arg2);
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "Locked", "TopoDS_TShape");
      SWIG_fail;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_TopoDSJNI_TopoDS_1TShape_1Modified_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  TopoDS_TShape *arg1 = (TopoDS_TShape *) 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_TShape **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->Modified();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "Modified", "TopoDS_TShape");
      SWIG_fail;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TopoDSJNI_TopoDS_1TShape_1Modified_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  TopoDS_TShape *arg1 = (TopoDS_TShape *) 0 ;
  Standard_Boolean arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_TShape **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Modified(arg2);
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "Modified", "TopoDS_TShape");
      SWIG_fail;
    }
  }
}


SWIGEXPORT jint JNICALL Java_TopoDSJNI_TopoDS_1TShape_1NbChildren(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TopoDS_TShape *arg1 = (TopoDS_TShape *) 0 ;
  Standard_Integer result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_TShape **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Integer)(arg1)->NbChildren();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "NbChildren", "TopoDS_TShape");
      SWIG_fail;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_TopoDSJNI_TopoDS_1TShape_1Orientable_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  TopoDS_TShape *arg1 = (TopoDS_TShape *) 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_TShape **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->Orientable();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "Orientable", "TopoDS_TShape");
      SWIG_fail;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TopoDSJNI_TopoDS_1TShape_1Orientable_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  TopoDS_TShape *arg1 = (TopoDS_TShape *) 0 ;
  Standard_Boolean arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_TShape **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Orientable(arg2);
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "Orientable", "TopoDS_TShape");
      SWIG_fail;
    }
  }
}


SWIGEXPORT jint JNICALL Java_TopoDSJNI_TopoDS_1TShape_1ShapeType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TopoDS_TShape *arg1 = (TopoDS_TShape *) 0 ;
  TopAbs_ShapeEnum result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_TShape **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (TopAbs_ShapeEnum)(arg1)->ShapeType();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "ShapeType", "TopoDS_TShape");
      SWIG_fail;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TopoDSJNI_delete_1TopoDS_1TShape(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TopoDS_TShape *arg1 = (TopoDS_TShape *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TopoDS_TShape **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      delete arg1;
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "~TopoDS_TShape", "TopoDS_TShape");
      SWIG_fail;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_TopoDSJNI_new_1TopoDS_1CompSolid(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TopoDS_CompSolid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (TopoDS_CompSolid *)new TopoDS_CompSolid();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "TopoDS_CompSolid", "TopoDS_CompSolid");
      SWIG_fail;
    }
  }
  *(TopoDS_CompSolid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TopoDSJNI_delete_1TopoDS_1CompSolid(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TopoDS_CompSolid *arg1 = (TopoDS_CompSolid *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TopoDS_CompSolid **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      delete arg1;
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "~TopoDS_CompSolid", "TopoDS_CompSolid");
      SWIG_fail;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_TopoDSJNI_new_1TopoDS_1Compound(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TopoDS_Compound *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (TopoDS_Compound *)new TopoDS_Compound();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "TopoDS_Compound", "TopoDS_Compound");
      SWIG_fail;
    }
  }
  *(TopoDS_Compound **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TopoDSJNI_delete_1TopoDS_1Compound(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TopoDS_Compound *arg1 = (TopoDS_Compound *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TopoDS_Compound **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      delete arg1;
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "~TopoDS_Compound", "TopoDS_Compound");
      SWIG_fail;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_TopoDSJNI_new_1TopoDS_1Edge(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TopoDS_Edge *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (TopoDS_Edge *)new TopoDS_Edge();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "TopoDS_Edge", "TopoDS_Edge");
      SWIG_fail;
    }
  }
  *(TopoDS_Edge **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TopoDSJNI_delete_1TopoDS_1Edge(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TopoDS_Edge *arg1 = (TopoDS_Edge *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TopoDS_Edge **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      delete arg1;
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "~TopoDS_Edge", "TopoDS_Edge");
      SWIG_fail;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_TopoDSJNI_new_1TopoDS_1Face(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TopoDS_Face *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (TopoDS_Face *)new TopoDS_Face();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "TopoDS_Face", "TopoDS_Face");
      SWIG_fail;
    }
  }
  *(TopoDS_Face **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TopoDSJNI_delete_1TopoDS_1Face(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TopoDS_Face *arg1 = (TopoDS_Face *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TopoDS_Face **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      delete arg1;
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "~TopoDS_Face", "TopoDS_Face");
      SWIG_fail;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_TopoDSJNI_new_1TopoDS_1Shell(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TopoDS_Shell *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (TopoDS_Shell *)new TopoDS_Shell();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "TopoDS_Shell", "TopoDS_Shell");
      SWIG_fail;
    }
  }
  *(TopoDS_Shell **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TopoDSJNI_delete_1TopoDS_1Shell(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TopoDS_Shell *arg1 = (TopoDS_Shell *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TopoDS_Shell **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      delete arg1;
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "~TopoDS_Shell", "TopoDS_Shell");
      SWIG_fail;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_TopoDSJNI_new_1TopoDS_1Solid(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TopoDS_Solid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (TopoDS_Solid *)new TopoDS_Solid();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "TopoDS_Solid", "TopoDS_Solid");
      SWIG_fail;
    }
  }
  *(TopoDS_Solid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TopoDSJNI_delete_1TopoDS_1Solid(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TopoDS_Solid *arg1 = (TopoDS_Solid *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TopoDS_Solid **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      delete arg1;
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "~TopoDS_Solid", "TopoDS_Solid");
      SWIG_fail;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_TopoDSJNI_TopoDS_1TCompSolid_1EmptyCopy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopoDS_TCompSolid *arg1 = (TopoDS_TCompSolid *) 0 ;
  SwigValueWrapper< opencascade::handle< TopoDS_TShape > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_TCompSolid **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->EmptyCopy();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "EmptyCopy", "TopoDS_TCompSolid");
      SWIG_fail;
    }
  }
  *(opencascade::handle< TopoDS_TShape > **)&jresult = new opencascade::handle< TopoDS_TShape >((const opencascade::handle< TopoDS_TShape > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TopoDSJNI_TopoDS_1TCompSolid_1ShapeType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TopoDS_TCompSolid *arg1 = (TopoDS_TCompSolid *) 0 ;
  TopAbs_ShapeEnum result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_TCompSolid **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (TopAbs_ShapeEnum)(arg1)->ShapeType();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "ShapeType", "TopoDS_TCompSolid");
      SWIG_fail;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TopoDSJNI_new_1TopoDS_1TCompSolid(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TopoDS_TCompSolid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (TopoDS_TCompSolid *)new TopoDS_TCompSolid();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "TopoDS_TCompSolid", "TopoDS_TCompSolid");
      SWIG_fail;
    }
  }
  *(TopoDS_TCompSolid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TopoDSJNI_delete_1TopoDS_1TCompSolid(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TopoDS_TCompSolid *arg1 = (TopoDS_TCompSolid *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TopoDS_TCompSolid **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      delete arg1;
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "~TopoDS_TCompSolid", "TopoDS_TCompSolid");
      SWIG_fail;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_TopoDSJNI_TopoDS_1TCompound_1EmptyCopy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopoDS_TCompound *arg1 = (TopoDS_TCompound *) 0 ;
  SwigValueWrapper< opencascade::handle< TopoDS_TShape > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_TCompound **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->EmptyCopy();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "EmptyCopy", "TopoDS_TCompound");
      SWIG_fail;
    }
  }
  *(opencascade::handle< TopoDS_TShape > **)&jresult = new opencascade::handle< TopoDS_TShape >((const opencascade::handle< TopoDS_TShape > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TopoDSJNI_TopoDS_1TCompound_1ShapeType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TopoDS_TCompound *arg1 = (TopoDS_TCompound *) 0 ;
  TopAbs_ShapeEnum result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_TCompound **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (TopAbs_ShapeEnum)(arg1)->ShapeType();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "ShapeType", "TopoDS_TCompound");
      SWIG_fail;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TopoDSJNI_new_1TopoDS_1TCompound(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TopoDS_TCompound *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (TopoDS_TCompound *)new TopoDS_TCompound();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "TopoDS_TCompound", "TopoDS_TCompound");
      SWIG_fail;
    }
  }
  *(TopoDS_TCompound **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TopoDSJNI_delete_1TopoDS_1TCompound(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TopoDS_TCompound *arg1 = (TopoDS_TCompound *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TopoDS_TCompound **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      delete arg1;
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "~TopoDS_TCompound", "TopoDS_TCompound");
      SWIG_fail;
    }
  }
}


SWIGEXPORT jint JNICALL Java_TopoDSJNI_TopoDS_1TEdge_1ShapeType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TopoDS_TEdge *arg1 = (TopoDS_TEdge *) 0 ;
  TopAbs_ShapeEnum result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_TEdge **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (TopAbs_ShapeEnum)(arg1)->ShapeType();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "ShapeType", "TopoDS_TEdge");
      SWIG_fail;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TopoDSJNI_delete_1TopoDS_1TEdge(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TopoDS_TEdge *arg1 = (TopoDS_TEdge *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TopoDS_TEdge **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      delete arg1;
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "~TopoDS_TEdge", "TopoDS_TEdge");
      SWIG_fail;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_TopoDSJNI_TopoDS_1TFace_1EmptyCopy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopoDS_TFace *arg1 = (TopoDS_TFace *) 0 ;
  SwigValueWrapper< opencascade::handle< TopoDS_TShape > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_TFace **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->EmptyCopy();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "EmptyCopy", "TopoDS_TFace");
      SWIG_fail;
    }
  }
  *(opencascade::handle< TopoDS_TShape > **)&jresult = new opencascade::handle< TopoDS_TShape >((const opencascade::handle< TopoDS_TShape > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TopoDSJNI_TopoDS_1TFace_1ShapeType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TopoDS_TFace *arg1 = (TopoDS_TFace *) 0 ;
  TopAbs_ShapeEnum result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_TFace **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (TopAbs_ShapeEnum)(arg1)->ShapeType();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "ShapeType", "TopoDS_TFace");
      SWIG_fail;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TopoDSJNI_new_1TopoDS_1TFace(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TopoDS_TFace *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (TopoDS_TFace *)new TopoDS_TFace();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "TopoDS_TFace", "TopoDS_TFace");
      SWIG_fail;
    }
  }
  *(TopoDS_TFace **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TopoDSJNI_delete_1TopoDS_1TFace(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TopoDS_TFace *arg1 = (TopoDS_TFace *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TopoDS_TFace **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      delete arg1;
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "~TopoDS_TFace", "TopoDS_TFace");
      SWIG_fail;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_TopoDSJNI_TopoDS_1TShell_1EmptyCopy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopoDS_TShell *arg1 = (TopoDS_TShell *) 0 ;
  SwigValueWrapper< opencascade::handle< TopoDS_TShape > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_TShell **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->EmptyCopy();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "EmptyCopy", "TopoDS_TShell");
      SWIG_fail;
    }
  }
  *(opencascade::handle< TopoDS_TShape > **)&jresult = new opencascade::handle< TopoDS_TShape >((const opencascade::handle< TopoDS_TShape > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TopoDSJNI_TopoDS_1TShell_1ShapeType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TopoDS_TShell *arg1 = (TopoDS_TShell *) 0 ;
  TopAbs_ShapeEnum result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_TShell **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (TopAbs_ShapeEnum)(arg1)->ShapeType();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "ShapeType", "TopoDS_TShell");
      SWIG_fail;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TopoDSJNI_new_1TopoDS_1TShell(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TopoDS_TShell *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (TopoDS_TShell *)new TopoDS_TShell();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "TopoDS_TShell", "TopoDS_TShell");
      SWIG_fail;
    }
  }
  *(TopoDS_TShell **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TopoDSJNI_delete_1TopoDS_1TShell(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TopoDS_TShell *arg1 = (TopoDS_TShell *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TopoDS_TShell **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      delete arg1;
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "~TopoDS_TShell", "TopoDS_TShell");
      SWIG_fail;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_TopoDSJNI_TopoDS_1TSolid_1EmptyCopy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopoDS_TSolid *arg1 = (TopoDS_TSolid *) 0 ;
  SwigValueWrapper< opencascade::handle< TopoDS_TShape > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_TSolid **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->EmptyCopy();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "EmptyCopy", "TopoDS_TSolid");
      SWIG_fail;
    }
  }
  *(opencascade::handle< TopoDS_TShape > **)&jresult = new opencascade::handle< TopoDS_TShape >((const opencascade::handle< TopoDS_TShape > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TopoDSJNI_TopoDS_1TSolid_1ShapeType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TopoDS_TSolid *arg1 = (TopoDS_TSolid *) 0 ;
  TopAbs_ShapeEnum result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_TSolid **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (TopAbs_ShapeEnum)(arg1)->ShapeType();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "ShapeType", "TopoDS_TSolid");
      SWIG_fail;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TopoDSJNI_new_1TopoDS_1TSolid(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TopoDS_TSolid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (TopoDS_TSolid *)new TopoDS_TSolid();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "TopoDS_TSolid", "TopoDS_TSolid");
      SWIG_fail;
    }
  }
  *(TopoDS_TSolid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TopoDSJNI_delete_1TopoDS_1TSolid(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TopoDS_TSolid *arg1 = (TopoDS_TSolid *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TopoDS_TSolid **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      delete arg1;
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "~TopoDS_TSolid", "TopoDS_TSolid");
      SWIG_fail;
    }
  }
}


SWIGEXPORT jint JNICALL Java_TopoDSJNI_TopoDS_1TVertex_1ShapeType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TopoDS_TVertex *arg1 = (TopoDS_TVertex *) 0 ;
  TopAbs_ShapeEnum result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_TVertex **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (TopAbs_ShapeEnum)(arg1)->ShapeType();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "ShapeType", "TopoDS_TVertex");
      SWIG_fail;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TopoDSJNI_delete_1TopoDS_1TVertex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TopoDS_TVertex *arg1 = (TopoDS_TVertex *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TopoDS_TVertex **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      delete arg1;
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "~TopoDS_TVertex", "TopoDS_TVertex");
      SWIG_fail;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_TopoDSJNI_TopoDS_1TWire_1EmptyCopy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopoDS_TWire *arg1 = (TopoDS_TWire *) 0 ;
  SwigValueWrapper< opencascade::handle< TopoDS_TShape > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_TWire **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->EmptyCopy();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "EmptyCopy", "TopoDS_TWire");
      SWIG_fail;
    }
  }
  *(opencascade::handle< TopoDS_TShape > **)&jresult = new opencascade::handle< TopoDS_TShape >((const opencascade::handle< TopoDS_TShape > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_TopoDSJNI_TopoDS_1TWire_1ShapeType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TopoDS_TWire *arg1 = (TopoDS_TWire *) 0 ;
  TopAbs_ShapeEnum result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_TWire **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (TopAbs_ShapeEnum)(arg1)->ShapeType();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "ShapeType", "TopoDS_TWire");
      SWIG_fail;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TopoDSJNI_new_1TopoDS_1TWire(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TopoDS_TWire *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (TopoDS_TWire *)new TopoDS_TWire();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "TopoDS_TWire", "TopoDS_TWire");
      SWIG_fail;
    }
  }
  *(TopoDS_TWire **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TopoDSJNI_delete_1TopoDS_1TWire(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TopoDS_TWire *arg1 = (TopoDS_TWire *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TopoDS_TWire **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      delete arg1;
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "~TopoDS_TWire", "TopoDS_TWire");
      SWIG_fail;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_TopoDSJNI_new_1TopoDS_1Vertex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopoDS_Vertex arg1 ;
  TopoDS_Vertex const *argp1 ;
  TopoDS_Vertex *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(TopoDS_Vertex **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null TopoDS_Vertex const");
    return 0;
  }
  arg1 = *argp1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (TopoDS_Vertex *)new TopoDS_Vertex(arg1);
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "TopoDS_Vertex", "TopoDS_Vertex");
      SWIG_fail;
    }
  }
  *(TopoDS_Vertex **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_TopoDSJNI_new_1TopoDS_1Vertex_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TopoDS_Vertex *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (TopoDS_Vertex *)new TopoDS_Vertex();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "TopoDS_Vertex", "TopoDS_Vertex");
      SWIG_fail;
    }
  }
  *(TopoDS_Vertex **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TopoDSJNI_delete_1TopoDS_1Vertex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TopoDS_Vertex *arg1 = (TopoDS_Vertex *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TopoDS_Vertex **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      delete arg1;
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "~TopoDS_Vertex", "TopoDS_Vertex");
      SWIG_fail;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_TopoDSJNI_new_1TopoDS_1Wire(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TopoDS_Wire *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (TopoDS_Wire *)new TopoDS_Wire();
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "TopoDS_Wire", "TopoDS_Wire");
      SWIG_fail;
    }
  }
  *(TopoDS_Wire **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_TopoDSJNI_delete_1TopoDS_1Wire(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TopoDS_Wire *arg1 = (TopoDS_Wire *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TopoDS_Wire **)&jarg1; 
  {
    try
    {
      OCC_CATCH_SIGNALS
      delete arg1;
    } 
    catch(Standard_Failure const& error)
    {
      process_exception(error, "~TopoDS_Wire", "TopoDS_Wire");
      SWIG_fail;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_TopoDSJNI_TopoDS_1HShape_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Standard_Transient **)&baseptr = *(TopoDS_HShape **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_TopoDSJNI_TopoDS_1TShape_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Standard_Transient **)&baseptr = *(TopoDS_TShape **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_TopoDSJNI_TopoDS_1CompSolid_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(TopoDS_Shape **)&baseptr = *(TopoDS_CompSolid **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_TopoDSJNI_TopoDS_1Compound_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(TopoDS_Shape **)&baseptr = *(TopoDS_Compound **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_TopoDSJNI_TopoDS_1Edge_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(TopoDS_Shape **)&baseptr = *(TopoDS_Edge **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_TopoDSJNI_TopoDS_1Face_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(TopoDS_Shape **)&baseptr = *(TopoDS_Face **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_TopoDSJNI_TopoDS_1Shell_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(TopoDS_Shape **)&baseptr = *(TopoDS_Shell **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_TopoDSJNI_TopoDS_1Solid_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(TopoDS_Shape **)&baseptr = *(TopoDS_Solid **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_TopoDSJNI_TopoDS_1TCompSolid_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(TopoDS_TShape **)&baseptr = *(TopoDS_TCompSolid **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_TopoDSJNI_TopoDS_1TCompound_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(TopoDS_TShape **)&baseptr = *(TopoDS_TCompound **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_TopoDSJNI_TopoDS_1TEdge_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(TopoDS_TShape **)&baseptr = *(TopoDS_TEdge **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_TopoDSJNI_TopoDS_1TFace_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(TopoDS_TShape **)&baseptr = *(TopoDS_TFace **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_TopoDSJNI_TopoDS_1TShell_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(TopoDS_TShape **)&baseptr = *(TopoDS_TShell **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_TopoDSJNI_TopoDS_1TSolid_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(TopoDS_TShape **)&baseptr = *(TopoDS_TSolid **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_TopoDSJNI_TopoDS_1TVertex_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(TopoDS_TShape **)&baseptr = *(TopoDS_TVertex **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_TopoDSJNI_TopoDS_1TWire_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(TopoDS_TShape **)&baseptr = *(TopoDS_TWire **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_TopoDSJNI_TopoDS_1Vertex_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(TopoDS_Shape **)&baseptr = *(TopoDS_Vertex **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_TopoDSJNI_TopoDS_1Wire_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(TopoDS_Shape **)&baseptr = *(TopoDS_Wire **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

